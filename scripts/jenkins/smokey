#!/bin/bash

: ${CROWBAR_DIR:=$CROWBAR_DIR}
d="./dev"
#d="echo $d"
E=
#E=echo

SLOG=`mktemp ~/smokey.log.XXXXX`

# redirect stdin
# (prevent subprocesses like ssh to read from outer stdin)
exec </dev/null
exec 7>&1
exec 1> >(tee $SLOG)
exec 2>&1

crowbar_default_build=${crowbar_default_build:-openstack-os-build}

BASE=./
PR=
pr=

function usage()
{
  echo "Usage: $0 <prepare> <smoke [pullrequest]> <prpending [release]>"
  echo "  $0 prepare"
  echo "          once setup the environment needed to run mkcloud based"
  echo "          smoketests on this machine"
  echo
  echo "  $0 smoke barclamp-crowbar/pull/4711"
  echo "          run smoketests with pull request 4711 for barclamp crowbar"
  echo
  echo "  $0 prpending roxy"
  echo "          list pending pull requests for roxy release"
  exit 1
}

function clear_crowbar_checkout()
{
  pushd $CROWBAR_DIR
  $E rm -rf .ci-tracking/
  $E git clean -f
  $E $d switch
  $E rm -f ~/prlist{,.tac}
  popd
}

function crowbar_refetch()
{
  pushd $CROWBAR_DIR
  $E git clean -f
  $E $d switch
  $E $d fetch
  $E $d sync
  $E $d pull-requests fetch
  $E rm -f ~/prlist{,.tac}
  popd
}

function make_prlist()
{
  rel=${1:-RELEASE}
  prfile=~/prlist
  echo "creating $prfile for $rel"
  pushd $CROWBAR_DIR
  $E $d pull-requests list | grep "($rel" | sed -e "s/^[0-9]\+: //" > $prfile
  $E tac $prfile > ${prfile}.tac
  popd
}

function fetch_logs()
{
  $E ssh root@crowbar 'touch /var/log/smoketest-nonempty ;  BZIP2="-9" tar -cjf /root/smoke-logs-`date +%F-%H-%M-%S`.tar.bz2 /root/screenlog* /var/log/smoketest* /var/log/crowbar* /var/log/chef* /var/chef /opt/dell/bin'
  $E scp "root@crowbar:/root/smoke-logs-*" .
}

function log_step()
{
  code=$1
  reason=${2:-unknown}
  if [ $code != 0 ] ; then
    echo "Detected exit code: $code ...aborting after fetching logs"
    echo "Exited with code $code at step: $reason" | tee -a $BASE/failed.step
  else
    echo "Finished step: $reason" | tee -a $BASE/succeeded.step
  fi
}

function check_exit()
{
  code=$1
  reason=${2:-unknown}
  log_step "$code" "$reason"

  if [ $code != 0 ] ; then
    fetch_logs
    [ -e $SLOG ] && mv $SLOG $BASE/
    exit $code
  fi
}

function clean_barclamps()
{
  crowdir="$CROWBAR_DIR"
  if [ ! -d $crowdir ] ; then
    echo "Error: No crowbar checkout found at $crowdir"
    exit 11
  fi
  pushd $crowdir
  check_exit $? "cd to crowbar directory"
  for i in `ls barclamps` ; do [ ! -d barclamps/$i ] && continue ; pushd barclamps/$i ; git reset --hard HEAD ; git clean -f ; popd ; done
  popd
}

function defaultcloudrc()
{
  rc=${1:-cloud.rc}
  cat > $rc <<EOCLOUDRC
#!/bin/bash

export NOINSTALLCLOUDPATTERN=1
export cephvolumenumber=2
export cloudsource=X
export nodenumber=2
export debug=0
EOCLOUDRC
}

function ssh_key_check()
{
  mkdir -p ~/.ssh
  if ! [ -f ~/.ssh/github-susecloudapi-id_rsa  -a -f ~/.ssh/github-susecloudapi-id_rsa.pub ] ; then
    echo "Error: The SSH Key files of the user 'susecloudapi' are missing."
    echo "Please copy them to ~/.ssh here manually."
    exit 10
  fi

  grep -q github-susecloudapi-id_rsa ~/.ssh/config 2>/dev/null || cat >> ~/.ssh/config <<EOSSH
Host github.com
IdentityFile ~/.ssh/github-susecloudapi-id_rsa
NumberOfPasswordPrompts 0
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
EOSSH
}

function netrc_check()
{
  if ! grep -q "login susecloudapi" ~/.netrc ; then
    echo "Error: The netrc file for the github user susecloudapi is missing."
    echo "Please copy it here manually."
  fi
}

function prepare()
{
  rel=${1:-nonenonenone}
  if ! echo $BASH_VERSION | grep -q ^4 ; then
    $E zypper lr | grep -q shellsSP3 || zypper ar http://download.opensuse.org/repositories/shells/SLE_11_SP3/ shellsSP3
    $E zypper -v --gpg-auto-import-keys --no-gpg-checks -n ref
    $E zypper in -y 'bash>=4.2'
  fi

  $E [ -x ~/bin/update_automation ] || curl -o ~/bin/update_automation  https://raw.githubusercontent.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation
  $E chmod +x ~/bin/update_automation
  $E update_automation mkcloud
  $E [ -f ~/cloud.rc ] || defaultcloudrc ~/cloud.rc

  $E git config --global user.email doesnotexist@example.com
  $E git config --global user.name "SUSE Cloud API"

  if [ -d $CROWBAR_DIR/.git ] ; then
    echo "crowbar repo is already cloned"
    $E pushd $CROWBAR_DIR
  else
    $E pushd `dirname $CROWBAR_DIR`
    $E git clone ssh://git@github.com/crowbar/crowbar.git
    $E cd crowbar
    $E $d setup --no-github
    $E $d switch $rel/crowbar_default_build
    $E $d pull-requests fetch
  fi
  popd
}

function crowbar_clean_check()
{
  pushd $CROWBAR_DIR
  if ! $d switch ; then
    $E clean_barclamps
    $d switch

    if [ $? != 0 ] ; then
      echo "Could not switch to clean state"
      exit 1
    fi
  fi
  popd
}


function smoker()
{
  bc="$@"
  if [ -z "$bc" ] ; then
    echo "Error: no barclamp to smoketest"
    return 12
  fi
  . ~/cloud.rc
  . ./cloud.rc
  check_exit $? "sourcing cloud.rc"
  $E mkcloud cleanup prepare setupadmin prepareinstcrowbar
  check_exit $? "within mkcloud first steps: cleanup prepare setupadmin prepareinstcrowbar"

  $E ssh root@crowbar "echo 'This instance is smoketesting the pullrequest: $PR' >> /etc/motd"
  $E ssh root@crowbar "echo 'Pull request: $pr' >> /etc/motd"
  $E ssh root@crowbar "echo 'Running smoketests of these barclamps: $bc' >> /etc/motd"

  $E rsync -av --exclude ".git" --exclude ".ci-tracking" ./crowbar root@crowbar:/root/
  check_exit $? "rsync git repo to crowbar node"

  # make sure active_record is not removed from the framework
  $E ssh root@crowbar 'sed -i.bak -e "s/^  config.frameworks -= \[ :active_record \]/# removed removal of active_record from installed file/" /opt/dell/crowbar_framework/config/environment.rb'
  # no check, as the file may be missing
  $E ssh root@crowbar 'sed -i.bak -e "s/^  config.frameworks -= \[ :active_record \]/# removed removal of active_record from git file/" /root/crowbar/barclamps/crowbar/crowbar_framework/config/environment.rb'
  check_exit $? "drop removal of active record framework (git file)"

  $E ssh root@crowbar 'for i in `zypper lr -d | grep SDK | cut -d" " -f1` ; do zypper rr $i ; done'
  check_exit $? "disable SDK repo if present"

  # copy stuff needed for smoketesting
  $E ssh root@crowbar 'mkdir -p /opt/dell/bin/ ; cp -a /root/crowbar/change-image/dell/* /root/crowbar/extra/*  /opt/dell/bin/'
  check_exit $? "cp dell bins to opt-dell-bin"

  # install crowbar to get the proper install-chef-suse script
  $E ssh root@crowbar 'zypper --non-interactive install --force crowbar'
  check_exit $? "install crowbar via zypper"

  #$E ssh root@crowbar 'sed -i.bak -e "s/sleshammer tcpdump/sleshammer tcpdump rubygem-sqlite3/" /opt/dell/bin/install-chef-suse.sh'
  #$E ssh root@crowbar 'sed -i.bak -e "s/rubygem-activesupport/rubygem-activesupport>=2.3.17/" /opt/dell/bin/install-chef-suse.sh'
  #check_exit $? "sed the activesupport version"

  $E ssh root@crowbar "mkdir -p /opt/dell ; touch /opt/dell/.all_nets"
  check_exit $? "prevent public and storage net to be created"

  $E mkcloud instcrowbarfromgit
  check_exit $? "mkcloud instcrowbarfromgit"

  $E ssh root@crowbar 'F=/srv/tftpboot/files/ami ; mkdir -p $F ;
    for I in ubuntu-12.04-server-cloudimg-amd64.tar.gz precise-server-cloudimg-amd64.qcow2 ; do
      wget --progress=dot:mega --directory-prefix $F http://clouddata.cloud.suse.de/images/cloud-images.ubuntu.com/releases/precise/release/$I ;
    done'
  check_exit $? "downlaod ubuntu cloud image for glance test"

  $E ssh root@crowbar '/opt/dell/bin/barclamp_install.rb --force  $(find /root/crowbar/barclamps/* -maxdepth 0 -type d -print)'
  check_exit $? "barclamp-install.rb"

  $E ssh root@crowbar "echo \"sed '/generate_certs/ s/false/true/'\" > /opt/dell/barclamps/swift/smoketest/modify-json"
  check_exit $? "workaround, create ssl cert for swift"
  $E ssh root@crowbar "sed -i -e 's/sudo apt-get install -y python-swiftclient/sudo zypper -n in python-swiftclient/'  /opt/dell/barclamps/swift/smoketest/00-swift-deploy.test"
  $E ssh root@crowbar "sed -i -e 's/sudo apt-get install -y python-glanceclient/sudo zypper -n in python-glanceclient/'  /opt/dell/barclamps/glance/smoketest/00-check-images.test"
  log_step $? "workaround, fixing apt-get"


  # get the nodes discovered
  $E mkcloud setupcompute
  check_exit $? "mkcloud setupcompute"

  # wait functions taken from qa_crowbarsetup
  $E ssh root@crowbar 'echo -n "waiting for nodes:" ; while test $(crowbar machines list | grep ^d|wc -l)'" -lt $nodenumber ; do echo -n . ; sleep 10 ; done ; echo"
  $E ssh root@crowbar 'echo -n "waiting for nodes to be discovered" ;
    for node in $(crowbar machines list | grep ^d) ; do
      n=100; while test $n -gt 0 && ! knife node show -a state $node | grep discovered ; do
        echo -n . ; sleep 10 ; echo "another 50s" ; sleep 50 ; echo "done" ; done ; done'

  ret=0
  for b in $bc ; do
    $E ssh root@crowbar "DEBUG=y /opt/dell/bin/smoketest $b"
    oneret=$?
    echo "Smoketest $b returned with exitcode: $oneret"
    echo "------------"
    echo "$oneret" > smoketest.${b}.exitcode
    echo "------------"
    $E ssh root@crowbar "tail -n25 /var/log/smoketest/${b}-smoketest.log"
    echo "============"
    [ 0 != $oneret ] && ret=$oneret
  done
  $E fetch_logs

  # show some relevant log lines
  $E ssh root@crowbar 'grep -i Failed /var/log/smoketest/*'
  sret=$?
  if [ 0 = $sret ] ; then
    sret=1
    log_step $sret "Overall smoketest result: failed"
  else
    sret=0
    log_step $sret "Overall smoketest result: succeeded"
  fi

  return $sret
}

function smoke()
{
  PRstring=${1:-none-none-none}
  BASE=~/tobacco

  pushd $CROWBAR_DIR
  pr=
  echo "==def fetch latest changes:"
  $E $d fetch
  $E $d sync
  echo "==def pull-requests fetch latest pull requests:"
  $E $d pull-requests fetch

  for i in 1 2 ; do
    pr=`$d pull-requests list | grep "$PRstring\s*$" | head -1`
    [ -n "$pr" ] && break
    [ -z "$pr" ] && [ $i = 2 ] && break
    clear_crowbar_checkout
  done

  if [ -z "$pr" ] ; then
    echo "Error: no pull request found that matches: ${PRstring}"
    log_step 1 "Error: no pull request found that matches: ${PRstring}"
    exit 13
  fi

  echo $pr
  pr_id=`echo "$pr" | cut -d":" -f1`
  pr_show=`$d pull-requests show $pr_id`
  pr_release=`echo "$pr_show" | grep "^Release" | sed -e "s/^Release:\s*//"`
  pr_barclamps=`echo "neutron glance nova" ; (echo "$pr_show" | grep "^Repo:" | sed -e "s/^Repo:\s\+barclamp-//" | grep -Ev "^(neutron|glance|nova)$" | sort | uniq )`
  PR=
  if [[ $pr =~ "Multiple)" ]] ; then
    PR="multiple/pull/$pr_id"
  else
    PR=`echo "$pr_show" | grep "^Pull Request URL"  | head -1 |  sed -e "s#.*https://github.com/crowbar/##"`
  fi

  if [ -z "$PR" ] ; then
    echo "Error: no pull request found."
    exit 14
  fi

  BASE=~/tobacco/$PR
  mkdir -p $BASE
  exec 1>&7 2>&7 7>&-
  mv $SLOG $BASE/smokey.log
  exec 7>&1 1> >(tee -a $BASE/smokey.log)
  exec 2>&1

  $E $d switch $pr_release/$crowbar_default_build
  check_exit $? "dev switch to release/build"
  $E $d pull-requests checkout $pr_id
  check_exit $? "dev pull-requests checkout $pr_id: $PR"
  popd

  $E rsync -a --exclude ".git" --exclude ".ci-tracking" $CROWBAR_DIR $BASE
  pushd $BASE

  pushd $BASE/crowbar
  #barclamps=$(for i in `ls barclamps | grep -v tempest` ; do [ -f "barclamps/$i" -o -e "barclamps/$i/README.empty-branch" ] || echo "$i" ; done)
  barclamps=`echo $pr_barclamps`
  echo "Running the smoketests for these barclamps: $barclamps"
  popd

  defaultcloudrc cloud.rc
  case $pr_release in
    stoney)
      sed -i -e "s/cloudsource=.*/cloudsource=develcloud4/g" cloud.rc
    ;;
    roxy)
      sed -i -e "s/cloudsource=.*/cloudsource=susecloud3/g" cloud.rc
    ;;
    pebbles)
      sed -i -e "s/cloudsource=.*/cloudsource=susecloud2.0/g" cloud.rc
    ;;
  esac
  $E smoker "$barclamps"
  ret=$?
  log_step $ret "smoke test return code: $ret"
  popd
}

function prpending()
{
  rel=${1:-none}

  pushd $CROWBAR_DIR
  $d pull-requests list | grep ": ($rel "
  popd
}

### main ###

if [ -z "$1" ] ; then
  usage
fi

case $1 in
  prepare)
    [ -z "$1" ] && usage
    ssh_key_check
    netrc_check
    prepare $1
    ;;
  smoke)
    crowbar_clean_check
    shift
    [ -z "$1" ] && usage
    smoke "$@"
    ;;
  prpending)
    [ -z "$2" ] && usage
    prpending $2
    ;;
  prlist)
    shift
    make_prlist $1
    ;;
  clear)
    clear_crowbar_checkout
    ;;
  refetch)
    crowbar_refetch
    shift
    [ -z "$1" ] && usage
    make_prlist $1
    ;;
  refresh)
    clear_crowbar_checkout
    crowbar_refetch
    shift
    [ -z "$1" ] && usage
    make_prlist $1
    ;;
  *)
    usage
    ;;
esac

